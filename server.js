// Generated by CoffeeScript 1.8.0
fs = require("fs");
util = require("util");
mime = require("mime");
path = require('path'); 
crypto = require('crypto');
md5 = crypto.createHash('md5');

var pngcmd = function pngfun(ws,data){
	console.log("pngcmd");
	var dataUri;
	if (data.length == 1){
	 dataUri = base64Image("./src/res/iXiangQi_55x55/bpawn.png");
	}else{

		fs.stat(data[1], function(err, stat) {
    			if(err == null) {
        			dataUri = base64Image(data[1]);
    			} else {
        			console.log('pngcmd open file error: ', err.code);
				ws.send('Cannot find '+ data[1], { binary: false });
				return	
    			}
		});

	}
	ws.send(data[1], { binary: false });
	ws.send('$'+data[0]+" "+dataUri, { binary: false });
}


var pngbcmd = function pngfun(ws,data){
  console.log("pngbcmd");
  /*
  var dataUri;
  var img = {};
  if (data.length == 1){
   //dataUri = base64Image("./src/res/iXiangQi_55x55/bpawn.png");
    img.data = fs.readFileSync("./src/res/iXiangQi_55x55/bpawn.png");
    md5.update(img.data);
    img.sum = md5.digest('hex');
    console.log(img.sum+ ' ' + "./src/res/iXiangQi_55x55/bpawn.png");

  }else{

    fs.stat(data[1], function(err, stat) {
          if(err == null) {
              console.log("Send binary file");
              img.data = fs.readFileSync(data[1]);
              md5.update(img.data);
              img.sum = md5.digest('hex');
              //crypto.createHash('md5').update(img.data).digest("hex");
              console.log(img.sum+ ' ' + data[1]);
              //dataUri = base64Image(data[1]);
          } else {
              console.log('pngcmd open file error: ', err.code);
        ws.send('Cannot find '+ data[1], { binary: false });
        return  
          }
    });

  }
  //ws.send(data[1], { binary: false });
  //ws.send('$'+data[0]+" "+img.sum, { binary: false });
  //ws.send(data[0]+" "+img.sum, { binary: false });
  //ws.send('$'+data[0]+" "+img, { binary: true });
  */
  
 var a = 'neo';
 var buf = new ArrayBuffer(2+a.length+1);
 var bytearray = new Uint8Array(buf);
 bytearray[0] = '$'.charCodeAt(0);
 bytearray[1] = '$'.charCodeAt(0);
  bytearray[2+0] = a.charCodeAt(0);
  bytearray[2+1] = a.charCodeAt(1);
  bytearray[2+2] = a.charCodeAt(2);
  bytearray[2+3] = a.charCodeAt(3);
  //ws.binaryType = "arraybuffer";
  ws.send(bytearray, { binary: true, mask: false });
  var string_buf = new Buffer(bytearray.byteLength);
  for (var i=0; i<bytearray.byteLength; i++) {
    //myString += String.fromCharCode(bytearray[i])
    string_buf[i] = bytearray[i];
  }
  console.log("Send: "+ string_buf);
}

var abccmd = function abcfun(ws,data){
        console.log("abccmd");
	var send_data = '$'+data[0];
	for(var i = 1; i < data.length;i++)
        {
		send_data += " "+ data[i]
                console.log(data[i]);
        }
	ws.send(send_data, { binary: false });
}

function base64Image(src) {
    var data = fs.readFileSync(src).toString("base64");
    //return util.format("data:%s;base64,%s", mime.lookup(src), data);
    return data;
}

function ArrayBufferAddStr(arraybuffer,str){

}

function ArrayBufferAddInt8(arraybuffer,int8){

}

function ArrayBufferAddInt16(arraybuffer,int16){

}

function ArrayBufferAddInt32(arraybuffer,int32){

}

var cmdlist = [
    { name: 'png', callback: pngcmd }
  , { name: 'abc', callback: abccmd }
  , { name: 'pngb', callback: pngbcmd }
];
//cmdlist.push( { name: 'png', callback:'' } )

(function() {
  var Encryptor, KEY, LOCAL_ADDRESS, METHOD, PORT, WebSocket, WebSocketServer, config, configContent, configFile, configFromArgs, fs, http, inetNtoa, k, net, options, parseArgs, path, server, timeout, v, wss, _ref;

  net = require("net");

  fs = require("fs");

  util = require("util");

  path = require("path");

  http = require("http");

  WebSocket = require('ws');

  WebSocketServer = WebSocket.Server;

  parseArgs = require("minimist");
  Encryptor = require("./encrypt").Encryptor;
  options = {
    alias: {
      'b': 'local_address',
      'r': 'remote_port',
      'k': 'password',
      'c': 'config_file',
      'm': 'method'
    },
    string: ['local_address', 'password', 'method', 'config_file'],
    "default": {
      'config_file': path.resolve(__dirname, "config.json")
    }
  };
  configFromArgs = parseArgs(process.argv.slice(2), options);
  configFile = configFromArgs.config_file;
  configContent = fs.readFileSync(configFile);
  config = JSON.parse(configContent);

  console.log("config[local_address]: "+config['local_address']);
  console.log("config[remote_port]: "+config['remote_port']);

  if (process.env.OPENSHIFT_NODEJS_IP) {
    config['local_address'] = process.env.OPENSHIFT_NODEJS_IP;
  }

  if (process.env.OPENSHIFT_NODEJS_PORT) {
    config['remote_port'] = process.env.OPENSHIFT_NODEJS_PORT;
  }

  setInterval(function() {
    if (global.gc) {
      return gc();
    }
  }, 1000);

  server = http.createServer(function(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end("neo websocket test.");
  });

  wss = new WebSocketServer({
    server: server
  });

 wss.on("connection", function(ws) {
    console.log("server connected");
    console.log("concurrent connections:", wss.clients.length);
	 ws.on("message", function(data, flags) {
	   if (data[0] == '$')
	   {
		var not_in_cmdlist=1;
		str = data.substring(1, data.length);
		var data_arr = str.toString().split(" ");
		for(var i = 0; i < cmdlist.length;i++)
                {
                   if (data_arr[0] == cmdlist[i].name){
                      console.log("got "+data_arr[0]);
		      cmdlist[i].callback(ws,data_arr);
		      not_in_cmdlist=0
                   }
                }
		if (not_in_cmdlist){
			console.log("Unknow command list!!!");
		}
	   }else{
	 	console.log("Receive: "+data);
		if (ws.readyState === WebSocket.OPEN) {
              		ws.send(data, {
                		binary: false
              		});
		}
	   }
	});
   ws.on("close", function() {
      console.log("server disconnected");
      console.log("concurrent connections:", wss.clients.length);
    });
 });

  server.listen(config['remote_port'], config['local_address'], function() {
    var address;
    address = server.address();
    return console.log("server listening at", address);
  });

  server.on("error", function(e) {
    if (e.code === "EADDRINUSE") {
      console.log("address in use, aborting");
    }
    return process.exit(1);
  });
//-----------------------
 console.log("test");
var dataUri = base64Image("./src/res/iXiangQi_55x55/bpawn.png");
//console.log(dataUri);
//-----------------------
}).call(this);
