// Generated by CoffeeScript 1.8.0
(function() {
  var Encryptor, KEY, LOCAL_ADDRESS, METHOD, PORT, WebSocket, WebSocketServer, config, configContent, configFile, configFromArgs, fs, http, inetNtoa, k, net, options, parseArgs, path, server, timeout, v, wss, _ref;

  net = require("net");

  fs = require("fs");

  path = require("path");

  http = require("http");

  WebSocket = require('ws');

  WebSocketServer = WebSocket.Server;

  parseArgs = require("minimist");
  Encryptor = require("./encrypt").Encryptor;
  options = {
    alias: {
      'b': 'local_address',
      'r': 'remote_port',
      'k': 'password',
      'c': 'config_file',
      'm': 'method'
    },
    string: ['local_address', 'password', 'method', 'config_file'],
    "default": {
      'config_file': path.resolve(__dirname, "config.json")
    }
  };
  configFromArgs = parseArgs(process.argv.slice(2), options);
  configFile = configFromArgs.config_file;
  configContent = fs.readFileSync(configFile);
  config = JSON.parse(configContent);

  console.log("config[local_address]: "+config['local_address']);
  console.log("config[remote_port]: "+config['remote_port']);

  if (process.env.OPENSHIFT_NODEJS_IP) {
    config['local_address'] = process.env.OPENSHIFT_NODEJS_IP;
  }

  if (process.env.OPENSHIFT_NODEJS_PORT) {
    config['remote_port'] = process.env.OPENSHIFT_NODEJS_PORT;
  }

  setInterval(function() {
    if (global.gc) {
      return gc();
    }
  }, 1000);

  server = http.createServer(function(req, res) {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end("neo websocket test.");
  });

  wss = new WebSocketServer({
    server: server
  });

 wss.on("connection", function(ws) {
    console.log("server connected");
    console.log("concurrent connections:", wss.clients.length);
	 ws.on("message", function(data, flags) {
	 	console.log("Receive: "+data);
		if (ws.readyState === WebSocket.OPEN) {
              		ws.send(data, {
                		binary: false
              		});
		}
	});
   ws.on("close", function() {
      console.log("server disconnected");
      console.log("concurrent connections:", wss.clients.length);
    });
 });

  server.listen(config['remote_port'], config['local_address'], function() {
    var address;
    address = server.address();
    return console.log("server listening at", address);
  });

  server.on("error", function(e) {
    if (e.code === "EADDRINUSE") {
      console.log("address in use, aborting");
    }
    return process.exit(1);
  });

}).call(this);
